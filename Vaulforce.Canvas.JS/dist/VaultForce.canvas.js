(()=>{"use strict";var t={536:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ContextManager=void 0;const n=r(611);e.ContextManager=class{constructor(t){if(this.contexts=new Map,this.webGLObject=new Array,this.webGLContext=!1,this.patterns=new Map,this.webGLTypes=[WebGLBuffer,WebGLShader,WebGLProgram,WebGLFramebuffer,WebGLRenderbuffer,WebGLTexture,WebGLUniformLocation,WebGLVertexArrayObject],this.add=(t,e)=>{if(!t)throw new Error("Invalid canvas.");if(!this.contexts.get(t.id)){var r;if(!(r=e?t.getContext(this.contextName,e):t.getContext(this.contextName)))throw new Error("Invalid context.");this.contexts.set(t.id,r)}},this.remove=t=>{this.contexts.delete(t.id)},this.setProperty=(t,e,r)=>{const n=this.getContext(t);this.setPropertyWithContext(n,e,r)},this.getProperty=(t,e)=>{const r=this.getContext(t);return this.serialize(r[e])},this.getActualRenderSize=t=>{const e=window.devicePixelRatio||1,r=t.clientWidth,n=t.clientHeight;if(t.width!==r*e||t.height!==n*e)return Array.from([r*e,n*e])},this.call=(t,e,r)=>{const n=this.getContext(t);return this.callWithContext(n,e,r)},this.callBatch=(t,e)=>{const r=this.getContext(t);for(let t=0;t<e.length;t++){let n=e[t].slice(2);e[t][1]?this.callWithContext(r,e[t][0],n):this.setPropertyWithContext(r,e[t][0],Array.isArray(n)&&n.length>0?n[0]:null)}},this.callWithContext=(t,e,r)=>{const o=this.prototypes[e].apply(t,null!=r?r.map(t=>this.deserialize(e,t)):[]);if("createPattern"==e){const t=(0,n.v4)();return this.patterns.set(t,o),t}return this.serialize(o)},this.setPropertyWithContext=(t,e,r)=>{"fillStyle"==e&&(r=this.patterns.get(r)||r),t[e]=this.deserialize(e,r)},this.getContext=t=>{if(!t)throw new Error("Invalid canvas.");const e=this.contexts.get(t.id);if(!e)throw new Error("Invalid context.");return e},this.deserialize=(t,e)=>{if(!this.webGLContext||null==e)return e;if(e.hasOwnProperty("webGLType")&&e.hasOwnProperty("id"))return this.webGLObject[e.id];if(Array.isArray(e)&&!t.endsWith("v"))return Int8Array.from(e);if("string"!=typeof e||"bufferData"!==t&&"bufferSubData"!==t)return e;{let t=window.atob(e),n=t.length,o=new Uint8Array(n);for(var r=0;r<n;r++)o[r]=t.charCodeAt(r);return o}},this.serialize=t=>{if(t instanceof TextMetrics)return{width:t.width};if(!this.webGLContext||null==t)return t;const e=this.webGLTypes.find(e=>t instanceof e);if(null!=e){const r=this.webGLObject.length;return this.webGLObject.push(t),{webGLType:e.name,id:r}}return t},this.contextName=t,"2d"===t)this.prototypes=CanvasRenderingContext2D.prototype;else if("webgl"===t||"experimental-webgl"===t)this.prototypes=WebGLRenderingContext.prototype,this.webGLContext=!0;else{if("webgl2"!==t&&"experimental-webgl2"!==t)throw new Error(`Invalid context name: ${t}`);this.prototypes=WebGL2RenderingContext.prototype,this.webGLContext=!0}}}},611:(t,e,r)=>{var n;r.r(e),r.d(e,{NIL:()=>O,parse:()=>y,stringify:()=>l,v1:()=>v,v3:()=>G,v4:()=>I,v5:()=>M,validate:()=>s,version:()=>P});var o=new Uint8Array(16);function i(){if(!n&&!(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,s=function(t){return"string"==typeof t&&a.test(t)};for(var c=[],u=0;u<256;++u)c.push((u+256).toString(16).substr(1));const l=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(c[t[e+0]]+c[t[e+1]]+c[t[e+2]]+c[t[e+3]]+"-"+c[t[e+4]]+c[t[e+5]]+"-"+c[t[e+6]]+c[t[e+7]]+"-"+c[t[e+8]]+c[t[e+9]]+"-"+c[t[e+10]]+c[t[e+11]]+c[t[e+12]]+c[t[e+13]]+c[t[e+14]]+c[t[e+15]]).toLowerCase();if(!s(r))throw TypeError("Stringified UUID is invalid");return r};var f,h,d=0,p=0;const v=function(t,e,r){var n=e&&r||0,o=e||new Array(16),a=(t=t||{}).node||f,s=void 0!==t.clockseq?t.clockseq:h;if(null==a||null==s){var c=t.random||(t.rng||i)();null==a&&(a=f=[1|c[0],c[1],c[2],c[3],c[4],c[5]]),null==s&&(s=h=16383&(c[6]<<8|c[7]))}var u=void 0!==t.msecs?t.msecs:Date.now(),v=void 0!==t.nsecs?t.nsecs:p+1,y=u-d+(v-p)/1e4;if(y<0&&void 0===t.clockseq&&(s=s+1&16383),(y<0||u>d)&&void 0===t.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");d=u,p=v,h=s;var w=(1e4*(268435455&(u+=122192928e5))+v)%4294967296;o[n++]=w>>>24&255,o[n++]=w>>>16&255,o[n++]=w>>>8&255,o[n++]=255&w;var g=u/4294967296*1e4&268435455;o[n++]=g>>>8&255,o[n++]=255&g,o[n++]=g>>>24&15|16,o[n++]=g>>>16&255,o[n++]=s>>>8|128,o[n++]=255&s;for(var b=0;b<6;++b)o[n+b]=a[b];return e||l(o)},y=function(t){if(!s(t))throw TypeError("Invalid UUID");var e,r=new Uint8Array(16);return r[0]=(e=parseInt(t.slice(0,8),16))>>>24,r[1]=e>>>16&255,r[2]=e>>>8&255,r[3]=255&e,r[4]=(e=parseInt(t.slice(9,13),16))>>>8,r[5]=255&e,r[6]=(e=parseInt(t.slice(14,18),16))>>>8,r[7]=255&e,r[8]=(e=parseInt(t.slice(19,23),16))>>>8,r[9]=255&e,r[10]=(e=parseInt(t.slice(24,36),16))/1099511627776&255,r[11]=e/4294967296&255,r[12]=e>>>24&255,r[13]=e>>>16&255,r[14]=e>>>8&255,r[15]=255&e,r};function w(t,e,r){function n(t,n,o,i){if("string"==typeof t&&(t=function(t){t=unescape(encodeURIComponent(t));for(var e=[],r=0;r<t.length;++r)e.push(t.charCodeAt(r));return e}(t)),"string"==typeof n&&(n=y(n)),16!==n.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var a=new Uint8Array(16+t.length);if(a.set(n),a.set(t,n.length),(a=r(a))[6]=15&a[6]|e,a[8]=63&a[8]|128,o){i=i||0;for(var s=0;s<16;++s)o[i+s]=a[s];return o}return l(a)}try{n.name=t}catch(t){}return n.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",n.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",n}function g(t){return 14+(t+64>>>9<<4)+1}function b(t,e){var r=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(r>>16)<<16|65535&r}function x(t,e,r,n,o,i){return b((a=b(b(e,t),b(n,i)))<<(s=o)|a>>>32-s,r);var a,s}function C(t,e,r,n,o,i,a){return x(e&r|~e&n,t,e,o,i,a)}function m(t,e,r,n,o,i,a){return x(e&n|r&~n,t,e,o,i,a)}function L(t,e,r,n,o,i,a){return x(e^r^n,t,e,o,i,a)}function A(t,e,r,n,o,i,a){return x(r^(e|~n),t,e,o,i,a)}const G=w("v3",48,function(t){if("string"==typeof t){var e=unescape(encodeURIComponent(t));t=new Uint8Array(e.length);for(var r=0;r<e.length;++r)t[r]=e.charCodeAt(r)}return function(t){for(var e=[],r=32*t.length,n="0123456789abcdef",o=0;o<r;o+=8){var i=t[o>>5]>>>o%32&255,a=parseInt(n.charAt(i>>>4&15)+n.charAt(15&i),16);e.push(a)}return e}(function(t,e){t[e>>5]|=128<<e%32,t[g(e)-1]=e;for(var r=1732584193,n=-271733879,o=-1732584194,i=271733878,a=0;a<t.length;a+=16){var s=r,c=n,u=o,l=i;r=C(r,n,o,i,t[a],7,-680876936),i=C(i,r,n,o,t[a+1],12,-389564586),o=C(o,i,r,n,t[a+2],17,606105819),n=C(n,o,i,r,t[a+3],22,-1044525330),r=C(r,n,o,i,t[a+4],7,-176418897),i=C(i,r,n,o,t[a+5],12,1200080426),o=C(o,i,r,n,t[a+6],17,-1473231341),n=C(n,o,i,r,t[a+7],22,-45705983),r=C(r,n,o,i,t[a+8],7,1770035416),i=C(i,r,n,o,t[a+9],12,-1958414417),o=C(o,i,r,n,t[a+10],17,-42063),n=C(n,o,i,r,t[a+11],22,-1990404162),r=C(r,n,o,i,t[a+12],7,1804603682),i=C(i,r,n,o,t[a+13],12,-40341101),o=C(o,i,r,n,t[a+14],17,-1502002290),r=m(r,n=C(n,o,i,r,t[a+15],22,1236535329),o,i,t[a+1],5,-165796510),i=m(i,r,n,o,t[a+6],9,-1069501632),o=m(o,i,r,n,t[a+11],14,643717713),n=m(n,o,i,r,t[a],20,-373897302),r=m(r,n,o,i,t[a+5],5,-701558691),i=m(i,r,n,o,t[a+10],9,38016083),o=m(o,i,r,n,t[a+15],14,-660478335),n=m(n,o,i,r,t[a+4],20,-405537848),r=m(r,n,o,i,t[a+9],5,568446438),i=m(i,r,n,o,t[a+14],9,-1019803690),o=m(o,i,r,n,t[a+3],14,-187363961),n=m(n,o,i,r,t[a+8],20,1163531501),r=m(r,n,o,i,t[a+13],5,-1444681467),i=m(i,r,n,o,t[a+2],9,-51403784),o=m(o,i,r,n,t[a+7],14,1735328473),r=L(r,n=m(n,o,i,r,t[a+12],20,-1926607734),o,i,t[a+5],4,-378558),i=L(i,r,n,o,t[a+8],11,-2022574463),o=L(o,i,r,n,t[a+11],16,1839030562),n=L(n,o,i,r,t[a+14],23,-35309556),r=L(r,n,o,i,t[a+1],4,-1530992060),i=L(i,r,n,o,t[a+4],11,1272893353),o=L(o,i,r,n,t[a+7],16,-155497632),n=L(n,o,i,r,t[a+10],23,-1094730640),r=L(r,n,o,i,t[a+13],4,681279174),i=L(i,r,n,o,t[a],11,-358537222),o=L(o,i,r,n,t[a+3],16,-722521979),n=L(n,o,i,r,t[a+6],23,76029189),r=L(r,n,o,i,t[a+9],4,-640364487),i=L(i,r,n,o,t[a+12],11,-421815835),o=L(o,i,r,n,t[a+15],16,530742520),r=A(r,n=L(n,o,i,r,t[a+2],23,-995338651),o,i,t[a],6,-198630844),i=A(i,r,n,o,t[a+7],10,1126891415),o=A(o,i,r,n,t[a+14],15,-1416354905),n=A(n,o,i,r,t[a+5],21,-57434055),r=A(r,n,o,i,t[a+12],6,1700485571),i=A(i,r,n,o,t[a+3],10,-1894986606),o=A(o,i,r,n,t[a+10],15,-1051523),n=A(n,o,i,r,t[a+1],21,-2054922799),r=A(r,n,o,i,t[a+8],6,1873313359),i=A(i,r,n,o,t[a+15],10,-30611744),o=A(o,i,r,n,t[a+6],15,-1560198380),n=A(n,o,i,r,t[a+13],21,1309151649),r=A(r,n,o,i,t[a+4],6,-145523070),i=A(i,r,n,o,t[a+11],10,-1120210379),o=A(o,i,r,n,t[a+2],15,718787259),n=A(n,o,i,r,t[a+9],21,-343485551),r=b(r,s),n=b(n,c),o=b(o,u),i=b(i,l)}return[r,n,o,i]}(function(t){if(0===t.length)return[];for(var e=8*t.length,r=new Uint32Array(g(e)),n=0;n<e;n+=8)r[n>>5]|=(255&t[n/8])<<n%32;return r}(t),8*t.length))}),I=function(t,e,r){var n=(t=t||{}).random||(t.rng||i)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,e){r=r||0;for(var o=0;o<16;++o)e[r+o]=n[o];return e}return l(n)};function W(t,e,r,n){switch(t){case 0:return e&r^~e&n;case 1:case 3:return e^r^n;case 2:return e&r^e&n^r&n}}function U(t,e){return t<<e|t>>>32-e}const M=w("v5",80,function(t){var e=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof t){var n=unescape(encodeURIComponent(t));t=[];for(var o=0;o<n.length;++o)t.push(n.charCodeAt(o))}else Array.isArray(t)||(t=Array.prototype.slice.call(t));t.push(128);for(var i=t.length/4+2,a=Math.ceil(i/16),s=new Array(a),c=0;c<a;++c){for(var u=new Uint32Array(16),l=0;l<16;++l)u[l]=t[64*c+4*l]<<24|t[64*c+4*l+1]<<16|t[64*c+4*l+2]<<8|t[64*c+4*l+3];s[c]=u}s[a-1][14]=8*(t.length-1)/Math.pow(2,32),s[a-1][14]=Math.floor(s[a-1][14]),s[a-1][15]=8*(t.length-1)&4294967295;for(var f=0;f<a;++f){for(var h=new Uint32Array(80),d=0;d<16;++d)h[d]=s[f][d];for(var p=16;p<80;++p)h[p]=U(h[p-3]^h[p-8]^h[p-14]^h[p-16],1);for(var v=r[0],y=r[1],w=r[2],g=r[3],b=r[4],x=0;x<80;++x){var C=Math.floor(x/20),m=U(v,5)+W(C,y,w,g)+b+e[C]+h[x]>>>0;b=g,g=w,w=U(y,30)>>>0,y=v,v=m}r[0]=r[0]+v>>>0,r[1]=r[1]+y>>>0,r[2]=r[2]+w>>>0,r[3]=r[3]+g>>>0,r[4]=r[4]+b>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]}),O="00000000-0000-0000-0000-000000000000",P=function(t){if(!s(t))throw TypeError("Invalid UUID");return parseInt(t.substr(14,1),16)}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{const t=r(536);var e;!function(e){const r="BlazorExtensions",n={Canvas2d:new t.ContextManager("2d"),WebGL:new t.ContextManager("webgl"),WebGL2:new t.ContextManager("webgl2")};e.initialize=function(){"undefined"==typeof window||window[r]?window[r]=Object.assign(Object.assign({},window[r]),n):window[r]=Object.assign({},n)}}(e||(e={})),e.initialize()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,